for(beta in beta.list){
DPDE =  tryCatch(optimr(par= initial,DPDloss,  N = N, tauvec = tauvec,
stressvec = stressvec, ITvec = ITvec, n = n, beta= beta, C=C,
method = "Nelder-Mead"),
error=function(sol){sol$code=3;return(NA)})
if(!is.na( sum(DPDE$par)) ){estimates[[paste0("DPD", beta)]] = DPDE$par}else{estimates[[paste0("DPD", beta)]] = NA}
}
return(estimates)
}
rm(list=ls())
source("dpd_estimation_competing.R")
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
cont = 0.2
beta.list = c(0.2,0.4,0.6,0.8,1)
initial = c(7, -0.01, 4, -0.01)
n = simulate.sample(theta, cont, N, tauvec, stressvec, ITvec,  seed = 1234, C=C)
estimators = estimate.function(N, tauvec, stressvec, ITvec, n, initial = initial, C=C, beta.list = beta.list)
estimators
rm(list=ls())
source("dpd_estimation_competing.R")
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
cont = 0.2
beta.list = c(0.2,0.4,0.6,0.8,1)
initial = c(7, -0.01, 4, -0.01)
n = simulate.sample(theta, cont, N, tauvec, stressvec, ITvec,  seed = 1234, C=C)
estimators = estimate.function(N, tauvec, stressvec, ITvec, n, initial = initial, C=C, beta.list = beta.list)
estimators
rm(list=ls())
source("dpd_estimation_competing.R")
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
cont = 0.2
beta.list = c(0.2,0.4,0.6,0.8,1)
initial = c(7, -0.01, 4, -0.01)
n = simulate.sample(theta, cont, N, tauvec, stressvec, ITvec,  seed = 1234, C=C)
n
estimators = estimate.function(N, tauvec, stressvec, ITvec, n, initial = initial, C=C, beta.list = beta.list)
estimators
rm(list=ls())
source("dpd_estimation_competing.R")
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
cont = 0.2
beta.list = c(0.2,0.4,0.6,0.8,1)
initial = c(7, -0.01, 4, -0.01)
n = simulate.sample(theta, cont, N, tauvec, stressvec, ITvec,  seed = 1234, C=C)
n
estimators = estimate.function(N, tauvec, stressvec, ITvec, n, initial = initial, C=C, beta.list = beta.list)
estimators
#MLE
MLE =  tryCatch(optimr(par= initial, DPDloss,  N = N, tauvec = tauvec,
stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C,
method = 'Nelder-Mead'),
error=function(sol){sol$code=3;return(NA)})
if(!is.na( sum(MLE$par)) ){estimates[["MLE"]] = unclass(MLE$par)}else{estimates[["MLE"]] = NA}
estimates = list()
#MLE
MLE =  tryCatch(optimr(par= initial, DPDloss,  N = N, tauvec = tauvec,
stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C,
method = 'Nelder-Mead'),
error=function(sol){sol$code=3;return(NA)})
if(!is.na( sum(MLE$par)) ){estimates[["MLE"]] = unclass(MLE$par)}else{estimates[["MLE"]] = NA}
MLE
MLE$par
unclass(MLE$par)
MLE$par
drop(MLE$par)
as.vector(MLE$par)
rm(list=ls())
source("dpd_estimation_competing.R")
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
cont = 0.2
beta.list = c(0.2,0.4,0.6,0.8,1)
initial = c(7, -0.01, 4, -0.01)
n = simulate.sample(theta, cont, N, tauvec, stressvec, ITvec,  seed = 1234, C=C)
n
estimators = estimate.function(N, tauvec, stressvec, ITvec, n, initial = initial, C=C, beta.list = beta.list)
estimators
rm(list=ls())
source("dpd_estimation_competing.R")
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
cont = 0.2
beta.list = c(0.2,0.4,0.6,0.8,1)
initial = c(7, -0.01, 4, -0.01)
n = simulate.sample(theta, cont, N, tauvec, stressvec, ITvec,  seed = sample(1:100,1), C=C)
n
estimators = estimate.function(N, tauvec, stressvec, ITvec, n, initial = initial, C=C, beta.list = beta.list)
estimators
rm(list=ls())
source("dpd_estimation_competing.R")
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
cont = 0.2
beta.list = c(0.2,0.4,0.6,0.8,1)
initial = c(7, -0.01, 4, -0.01)
n = simulate.sample(theta, cont, N, tauvec, stressvec, ITvec,  seed = sample(1:100,1), C=C)
n
estimators = estimate.function(N, tauvec, stressvec, ITvec, n, initial = initial, C=C, beta.list = beta.list)
estimators
rm(list=ls())
source("dpd_estimation_competing.R")
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
cont = 0.2
beta.list = c(0.2,0.4,0.6,0.8,1)
initial = c(7, -0.01, 4, -0.01)
n = simulate.sample(theta, cont, N, tauvec, stressvec, ITvec,  seed = 2024, C=C)
n
estimators = estimate.function(N, tauvec, stressvec, ITvec, n, initial = initial, C=C, beta.list = beta.list)
estimators
theta
rm(list=ls())
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
theta = -c(log(0.004),0.02, log(0.003),0.04)
#theta.cont.vec = list(theta, theta.cont, theta.cont2, theta.cont3)
cont.vec = c(0,0.05,0.1,0.15,0.2,0.25,0.3) #0.4,0.6)
beta.list = c(0.2,0.4,0.6,0.8,1)
source("G:/Mi unidad/UCM/ARTICULOS/One shot devices/SSALT Competing risks/codes/dpd_estimation_competing.R")
B=500
plot.error <- function(res.matrix, epsilons, xlabel, ylabel="MSE", tl = "", beta.list = c(0.2,0.4,0.6,0.8,1)){
x11()
colores= c("#0D0D0D","#3B3B3B", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
formas=c(17,3,15,5,2,7,1,8,9,10,11,12)
plot(epsilons, res.matrix[,1],col=colores[1],"o",lty=1, pch=formas[1],lwd=1.6, cex=1.05, ylim=c(min(res.matrix),max(res.matrix)),
xlab = xlabel, ylab = ylabel)
for (j in 2:(length(beta.list)+1)){
lines(epsilons ,res.matrix[,j],col=colores[j],"o",lty=j, pch=formas[j],lwd=1.6,cex=1.05)
}
legend("topleft", title= expression(beta), inset=c(0,0.0), c("MLE",as.character(c( 0.2, 0.4, 0.6, 0.8,1))), col = colores, lty = c(1,4:8),pch= formas, cex =0.75 )
title(main = tl)
}
plot.mean <- function(res, epsilons, xlabel, ylabel="MSE", tl = "", beta.list = c(0.2,0.4,0.6,0.8,1)){
x11()
colores= c("#0D0D0D","#3B3B3B", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
formas=c(17,3,15,5,2,7,1,8,9,10,11,12)
plot(epsilons, res[[1]][,1],col=colores[1],"o",lty=1, pch=formas[1],lwd=1.6, cex=1.05,
xlab = xlabel, ylab = ylabel, ylim = c(min(unlist(res)), max(unlist(res))))
for (j in 2:(length(beta.list)+1)){
lines(epsilons ,res[[j]][,1],col=colores[j],"o",lty=j, pch=formas[j],lwd=1.6,cex=1.05)
}
legend("topleft", title= expression(beta), inset=c(0,0.0), c("MLE",as.character(c( 0.2, 0.4, 0.6, 0.8,1)), "Opt"), col = colores, lty = c(1,4:8),pch= formas, cex =0.75 )
title(main = tl)
}
plot.sesitivity <- function(theta, tauvec, stressvec, ITvec, C){
betas = seq(0,1,by=0.01)
sensitivity.matrix = matrix(NA, nrow = length(betas), ncol = 2*C)
for(b in 1:length(betas)){
sensitivity.matrix[b,] = sensitivity.points(theta, tauvec, stressvec, ITvec, C, betas[b])
}
tl = c(expression(widehat(a)["01"]^beta), expression(widehat(a)["11"]^beta), expression(widehat(a)["02"]^beta), expression(widehat(a)["12"]^beta))
#plot
#colores= c("#0D0D0D", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
colores <- c( "#E69F00", "#009E73",  "#0072B2",  "#CC79A7")
for (k in 1:(2*C)){
#plot(betas, sensitivity.matrix[,k], col=colores[k], type = "l", lty=1,lwd=1.6, xlab = expression(beta), ylab = "IF")
x11()
ggplot(data=data.frame("beta" = betas, "IF" = sensitivity.matrix[,k]), aes(x=beta, y=IF))+
geom_line(size=1, color= colores[k])+
labs(title=" ",x=expression(beta), y = "sefl-standarized sensitivity")+
scale_color_brewer(palette="Blues")+
theme(plot.title = element_text(hjust = 0.5),
panel.background=element_rect(fill = "white", colour = "black", size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "gray"))
}
}
library(optimx)
rm(list=ls())
# Definición de las listas beta y epsilon
beta_lista <- c(0, 0.2, 0.4, 0.6, 0.8, 1)
epsilon_lista <- c(0, 0.05, 0.1, 0.2, 0.4) #Control the contamination level of each cell.
N <- 360
tau_vector <- c(45, 75)
cambio <- tau_vector[1]
riesgos <-c(1,2)
estres_vector <- c(35, 45)
IT <- c(15, 25, 35, 45,55, 65, 75)
theta_0 <- c(5, -0.02, 6.2, -0.04)
R <- 500
init <- c(5.1, -0.03, 6.3, -0.05)
pi <- function(lambda, i, j){
lambda_i <- lambda[i, ]
suma_lambda_i <- sum(lambda_i)
return(lambda[i, j] / suma_lambda_i)
}
probab_teorica <- function(t,riesgo, theta, cambio, IT) {
#Relación log-lineal
lambda_11 <- exp(-theta[1] - theta[2]*estres_vector[1])
lambda_12 <- exp(-theta[3] - theta[4]*estres_vector[1])
lambda_21 <- exp(-theta[1] - theta[2]*estres_vector[2])
lambda_22 <- exp(-theta[3] - theta[4]*estres_vector[2])
lambda <- matrix(c(lambda_11, lambda_21, lambda_12, lambda_22), nrow = 2, ncol = 2)
#Se refleja el desgaste que varía par acada riesgo competitivo
h_1 =  (1/lambda_21)*(cambio*lambda_11)
h_2 =  (1/lambda_22)*(cambio*lambda_12)
h <- c(h_1,h_2)
pos <- which(IT == t)
if (t <= cambio){
pi <- pi(lambda, 1, riesgo) #primer nivel de estrés antes del cambio
if (pos==1){
plj= pi*(1 -exp(-(lambda_11 + lambda_12)*t))
}
else{
plj= pi*(exp(-(lambda_11 + lambda_12)*IT[pos-1]) - exp(-(lambda_11 + lambda_12)*t))
}
}
else {
pi <- pi(lambda, 2, riesgo)
plj= pi*(exp(-lambda_21*(IT[pos-1] + h[1]- cambio) - lambda_22*(IT[pos-1] + h[2]- cambio)) -
exp(-lambda_21*(t + h[1]- cambio) - lambda_22*(t + h[2]- cambio)))
}
return(plj) # Devuelve una probabilidad, un único escalar
}
rm(list=ls())
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
rm(list=ls())
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
theta = -c(log(0.004),0.02, log(0.003),0.04)
#theta.cont.vec = list(theta, theta.cont, theta.cont2, theta.cont3)
cont.vec = c(0,0.05,0.1,0.15,0.2,0.25,0.3) #0.4,0.6)
beta.list = c(0.2,0.4,0.6,0.8,1)
source("G:/Mi unidad/UCM/ARTICULOS/One shot devices/SSALT Competing risks/codes/dpd_estimation_competing.R")
B=500
plot.error <- function(res.matrix, epsilons, xlabel, ylabel="MSE", tl = "", beta.list = c(0.2,0.4,0.6,0.8,1)){
rm(list=ls())
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
#theta = -c(log(0.004),0.02, log(0.003),0.04)
#theta.cont.vec = list(theta, theta.cont, theta.cont2, theta.cont3)
cont.vec = c(0,0.05,0.1,0.15,0.2,0.25,0.3) #0.4,0.6)
beta.list = c(0.2,0.4,0.6,0.8,1)
source("G:/Mi unidad/UCM/ARTICULOS/One shot devices/SSALT Competing risks/codes/dpd_estimation_competing.R")
B=500
plot.error <- function(res.matrix, epsilons, xlabel, ylabel="MSE", tl = "", beta.list = c(0.2,0.4,0.6,0.8,1)){
x11()
colores= c("#0D0D0D","#3B3B3B", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
formas=c(17,3,15,5,2,7,1,8,9,10,11,12)
plot(epsilons, res.matrix[,1],col=colores[1],"o",lty=1, pch=formas[1],lwd=1.6, cex=1.05, ylim=c(min(res.matrix),max(res.matrix)),
xlab = xlabel, ylab = ylabel)
for (j in 2:(length(beta.list)+1)){
lines(epsilons ,res.matrix[,j],col=colores[j],"o",lty=j, pch=formas[j],lwd=1.6,cex=1.05)
}
legend("topleft", title= expression(beta), inset=c(0,0.0), c("MLE",as.character(c( 0.2, 0.4, 0.6, 0.8,1))), col = colores, lty = c(1,4:8),pch= formas, cex =0.75 )
title(main = tl)
}
plot.mean <- function(res, epsilons, xlabel, ylabel="MSE", tl = "", beta.list = c(0.2,0.4,0.6,0.8,1)){
x11()
colores= c("#0D0D0D","#3B3B3B", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
formas=c(17,3,15,5,2,7,1,8,9,10,11,12)
plot(epsilons, res[[1]][,1],col=colores[1],"o",lty=1, pch=formas[1],lwd=1.6, cex=1.05,
xlab = xlabel, ylab = ylabel, ylim = c(min(unlist(res)), max(unlist(res))))
for (j in 2:(length(beta.list)+1)){
lines(epsilons ,res[[j]][,1],col=colores[j],"o",lty=j, pch=formas[j],lwd=1.6,cex=1.05)
}
legend("topleft", title= expression(beta), inset=c(0,0.0), c("MLE",as.character(c( 0.2, 0.4, 0.6, 0.8,1)), "Opt"), col = colores, lty = c(1,4:8),pch= formas, cex =0.75 )
title(main = tl)
}
plot.sesitivity <- function(theta, tauvec, stressvec, ITvec, C){
betas = seq(0,1,by=0.01)
sensitivity.matrix = matrix(NA, nrow = length(betas), ncol = 2*C)
for(b in 1:length(betas)){
sensitivity.matrix[b,] = sensitivity.points(theta, tauvec, stressvec, ITvec, C, betas[b])
}
tl = c(expression(widehat(a)["01"]^beta), expression(widehat(a)["11"]^beta), expression(widehat(a)["02"]^beta), expression(widehat(a)["12"]^beta))
#plot
#colores= c("#0D0D0D", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
colores <- c( "#E69F00", "#009E73",  "#0072B2",  "#CC79A7")
for (k in 1:(2*C)){
#plot(betas, sensitivity.matrix[,k], col=colores[k], type = "l", lty=1,lwd=1.6, xlab = expression(beta), ylab = "IF")
x11()
ggplot(data=data.frame("beta" = betas, "IF" = sensitivity.matrix[,k]), aes(x=beta, y=IF))+
geom_line(size=1, color= colores[k])+
labs(title=" ",x=expression(beta), y = "sefl-standarized sensitivity")+
scale_color_brewer(palette="Blues")+
theme(plot.title = element_text(hjust = 0.5),
panel.background=element_rect(fill = "white", colour = "black", size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "gray"))
}
}
# theta = -c(log(0.004),0.04, log(0.003),0.03)
#plot.sesitivity(theta, tauvec, stressvec, ITvec, C)
}
rm(list=ls())
N = 2*180
stressvec = c(35,45)
ITvec=c(15,25,35,45,55,65,75)
tauvec = c(45,75)
C=2
x0 = 30
t0 = 50
alpha = 0.05
alpha0= 0.05
theta = c(5,-0.02,6.2,-0.04)
#theta = -c(log(0.004),0.02, log(0.003),0.04)
#theta.cont.vec = list(theta, theta.cont, theta.cont2, theta.cont3)
cont.vec = c(0,0.05,0.1,0.15,0.2,0.25,0.3) #0.4,0.6)
beta.list = c(0.2,0.4,0.6,0.8,1)
source("G:/Mi unidad/UCM/ARTICULOS/One shot devices/SSALT Competing risks/codes/dpd_estimation_competing.R")
B=500
plot.error <- function(res.matrix, epsilons, xlabel, ylabel="MSE", tl = "", beta.list = c(0.2,0.4,0.6,0.8,1)){
x11()
colores= c("#0D0D0D","#3B3B3B", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
formas=c(17,3,15,5,2,7,1,8,9,10,11,12)
plot(epsilons, res.matrix[,1],col=colores[1],"o",lty=1, pch=formas[1],lwd=1.6, cex=1.05, ylim=c(min(res.matrix),max(res.matrix)),
xlab = xlabel, ylab = ylabel)
for (j in 2:(length(beta.list)+1)){
lines(epsilons ,res.matrix[,j],col=colores[j],"o",lty=j, pch=formas[j],lwd=1.6,cex=1.05)
}
legend("topleft", title= expression(beta), inset=c(0,0.0), c("MLE",as.character(c( 0.2, 0.4, 0.6, 0.8,1))), col = colores, lty = c(1,4:8),pch= formas, cex =0.75 )
title(main = tl)
}
plot.mean <- function(res, epsilons, xlabel, ylabel="MSE", tl = "", beta.list = c(0.2,0.4,0.6,0.8,1)){
x11()
colores= c("#0D0D0D","#3B3B3B", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
formas=c(17,3,15,5,2,7,1,8,9,10,11,12)
plot(epsilons, res[[1]][,1],col=colores[1],"o",lty=1, pch=formas[1],lwd=1.6, cex=1.05,
xlab = xlabel, ylab = ylabel, ylim = c(min(unlist(res)), max(unlist(res))))
for (j in 2:(length(beta.list)+1)){
lines(epsilons ,res[[j]][,1],col=colores[j],"o",lty=j, pch=formas[j],lwd=1.6,cex=1.05)
}
legend("topleft", title= expression(beta), inset=c(0,0.0), c("MLE",as.character(c( 0.2, 0.4, 0.6, 0.8,1)), "Opt"), col = colores, lty = c(1,4:8),pch= formas, cex =0.75 )
title(main = tl)
}
plot.sesitivity <- function(theta, tauvec, stressvec, ITvec, C){
betas = seq(0,1,by=0.01)
sensitivity.matrix = matrix(NA, nrow = length(betas), ncol = 2*C)
for(b in 1:length(betas)){
sensitivity.matrix[b,] = sensitivity.points(theta, tauvec, stressvec, ITvec, C, betas[b])
}
tl = c(expression(widehat(a)["01"]^beta), expression(widehat(a)["11"]^beta), expression(widehat(a)["02"]^beta), expression(widehat(a)["12"]^beta))
#plot
#colores= c("#0D0D0D", "#1874CD",  "#87CEFA", "#008B00", "#FF7F00", "#EE7942", "#CD2990", "#EE7AE9", "#CD3333")
colores <- c( "#E69F00", "#009E73",  "#0072B2",  "#CC79A7")
for (k in 1:(2*C)){
#plot(betas, sensitivity.matrix[,k], col=colores[k], type = "l", lty=1,lwd=1.6, xlab = expression(beta), ylab = "IF")
x11()
ggplot(data=data.frame("beta" = betas, "IF" = sensitivity.matrix[,k]), aes(x=beta, y=IF))+
geom_line(size=1, color= colores[k])+
labs(title=" ",x=expression(beta), y = "sefl-standarized sensitivity")+
scale_color_brewer(palette="Blues")+
theme(plot.title = element_text(hjust = 0.5),
panel.background=element_rect(fill = "white", colour = "black", size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "gray"))
}
}
# theta = -c(log(0.004),0.04, log(0.003),0.03)
#plot.sesitivity(theta, tauvec, stressvec, ITvec, C)
cont=0
lambdas = c()
#lambdas.cont = c()
for (j in c(1:C)){
lambdas[(2*j-1):(2*j)] = exp(theta[(2*j-1)]+ theta[2*j]*stressvec)
#lambdas.cont[(2*j-1):(2*j)] = exp(theta.cont[(2*j-1)]+ theta.cont[2*j]*stressvec)
}
lambdas
theta
stressvec
theta[1]+theta[2]*stressvc
theta[1]+theta[2]*stressvec
exp(theta[1]+theta[2]*stressvec)
exp(theta[3]+theta[4]*stressvec)
theta
theta[3]
theta[4]
th = theoretical.probability(lambdas, tauvec, stressvec, ITvec)
th
th.cont = rep(0, length(th)) #theoretical.probability(lambdas.cont, tauvec, stressvec, ITvec)
#th.cont[c(3,4,5,6)] = 1/4
#th.cont[c(9,10,11,12)] = 1/4
th.cont[c(3,4)] = 1/2
#contaminate step interval
#step.cont = 6
# j=2
#th[step.cont] = th[step.cont]*(1+cont)
#model.distribution.joint.competing.exponential(lambdas, tauvec, stressvec, ITvec[step-1],j) - model.distribution.joint.competing.exponential(lambdas.cont, tauvec, stressvec, ITvec[step], j)
#th[step] = max(th[step],0)
#th[length(th)] = max(0,1- sum(th[1:(length(th)-1)])) #correct so the probability vector sums up to 1
ncont = floor(N*cont)
th = th/sum(th)
n1 = drop(rmultinom(1, (N-ncont), prob = th))
n2 = drop(rmultinom(1, ncont, prob = th.cont))
n= n1+n2
n
optimr(par= initial, DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C, method = "Nelder-Mead")
initial = c(7,-0.05,4,-0.03)
optimx(par= initial, DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(7,-0.05,4,-0.03), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(6,-0.05,4,-0.03), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(6,-0.05,8,-0.03), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(6,-0.05,8,-0.03), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(6,-0.005,8,-0.001), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(6,-0.05,6,-0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(6,0.05,6,0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(8,0.05,6,0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(1,0.05,1,0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(8,0.05,1,1), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(8,0.05,1,-1), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(8,0.05,1,-0.1), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(8,0.05,5,-0.1), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(8,-0.05,5,-0.1), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(8,-0.05,5,-0.001), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(8,-0.05,5,-0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
theta
n = simulate.sample(theta, cont.vec[cont], N, tauvec, stressvec, ITvec,  seed = 10, C=C)
n = simulate.sample(theta, 0, N, tauvec, stressvec, ITvec,  seed = 10, C=C)
n
optimx(par= c(8,-0.05,5,-0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
optimx(par= c(6,-0.05,5,-0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
n = simulate.sample(theta, 0, N, tauvec, stressvec, ITvec,  seed = 16540, C=C)
optimx(par= c(6,-0.05,5,-0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
n
optimx(par= c(9,-0.05,5,-0.01), DPDloss,  N = N, tauvec = tauvec, stressvec = stressvec, ITvec = ITvec, n = n, beta=0, C=C)
